# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-05 09:07
from __future__ import unicode_literals

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import timeSeries.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=16)),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('icon', models.FileField(default='static/timeSeries/providerIcons/noInfoIcon.png', storage=django.core.files.storage.FileSystemStorage(location='/home/zepedro/Tethys/timeSeries'), upload_to='static/timeSeries/providerIcons/')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('introducedBy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(max_length=16)),
                ('name', models.CharField(max_length=256)),
                ('units', models.CharField(max_length=64)),
                ('description', models.TextField()),
                ('observations', models.TextField(blank=True, null=True)),
                ('icon', models.FileField(default='static/timeSeries/seriesIcons/charts.png', storage=django.core.files.storage.FileSystemStorage(location='/home/zepedro/Tethys/timeSeries'), upload_to='static/timeSeries/seriesIcons/')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('introducedBy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('forecastFile', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/home/zepedro/Tethys/timeSeries'), upload_to='forecasts/')),
                ('period', models.CharField(choices=[('second', 'second'), ('minute', 'minute'), ('hour', 'hour'), ('day', 'day'), ('week', 'week'), ('month', 'month'), ('year', 'year')], default='year', help_text='The duration of a cycle (e.g. the hydrological year).', max_length=6, verbose_name='period of the series')),
                ('referenceDate', models.DateTimeField(default=datetime.datetime(2016, 10, 1, 0, 0), help_text='The beginning of the hydrological year.', verbose_name='reference date for the period')),
                ('leadTime', models.PositiveIntegerField(default=30, help_text='How far into the future to extend the forecasts.', verbose_name='lead time')),
                ('type', models.CharField(choices=[('lin', 'Linear'), ('tan', 'Tansig')], default='tan', max_length=3, verbose_name='type of model')),
                ('regularize', models.DecimalField(decimal_places=5, default=0.01, help_text='Regularization constant to apply. Larger values will produce smoother forecasts.', max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='regularize the model')),
                ('splitBySeason', models.SmallIntegerField(default=3, help_text='Use different models for different seasons.', validators=[django.core.validators.MinValueValidator(Decimal('1')), django.core.validators.MaxValueValidator(Decimal('6'))], verbose_name='number of seasons')),
                ('errorFunction', models.CharField(choices=[('mse', 'Mean squared error'), ('mae', 'Mean absolute error')], default='mse', help_text='Choose the error function that evaluates how forecasts differ from observations.', max_length=3, verbose_name='error function')),
                ('allowNegative', models.BooleanField(default=False, verbose_name='allow negative values')),
                ('ready', models.BooleanField(default=False, verbose_name='ready to forecast')),
                ('nodes', models.SmallIntegerField(default=4, help_text='Set the complexity of the model by choosing the number of hidden nodes in the artificial neural network. Better to keep it simple.', validators=[django.core.validators.MaxValueValidator(Decimal('10'))], verbose_name='Number of nodes')),
                ('dataExpression', models.CharField(default='cycle, lead(filter(targets))', help_text='The function that transforms inputs to the model.', max_length=256, verbose_name='input expression')),
                ('targetExpression', models.CharField(default='targets', help_text='The function that transforms targets from the original series.', max_length=256, verbose_name='output expression')),
                ('population', models.SmallIntegerField(default=1000, help_text='The number of models being simultaneously trained.', validators=[django.core.validators.MinValueValidator(Decimal('200')), django.core.validators.MaxValueValidator(Decimal('4000'))], verbose_name='number of models')),
                ('epochs', models.SmallIntegerField(default=200, help_text='For how many iterations the models are trained.', validators=[django.core.validators.MinValueValidator(Decimal('10')), django.core.validators.MaxValueValidator(Decimal('1500'))], verbose_name='epochs')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('lat', models.DecimalField(decimal_places=5, max_digits=9)),
                ('lon', models.DecimalField(decimal_places=5, max_digits=9)),
                ('catchment', models.CharField(blank=True, max_length=256)),
                ('river', models.CharField(blank=True, max_length=256)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('observations', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('introducedBy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SatelliteData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('satellite', models.CharField(choices=[('TRMMSatelliteRainfall', 'TRMM 3B42 3h')], default='TRMMSatelliteRainfall', help_text='Choice among supported satellite products.', max_length=20, verbose_name='Satellite product')),
                ('observations', models.TextField(blank=True, null=True)),
                ('productSite', models.CharField(max_length=255, verbose_name='Product site')),
                ('downloadSite', models.CharField(max_length=255, verbose_name='Product download site')),
                ('description', models.TextField()),
                ('timestep', models.DateTimeField(default=datetime.datetime(1970, 1, 1, 0, 0), help_text='Time step as a reference to 1970.01.01 00:00.')),
                ('units', models.CharField(max_length=64)),
                ('dataFolder', models.CharField(default='/home/zepedro/Tethys/timeSeries/satelliteData/', max_length=255)),
                ('geometry', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/home/zepedro/Tethys/timeSeries'), upload_to='satelliteDataGeometries/')),
                ('latitudes', models.TextField(blank=True, null=True)),
                ('longitudes', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('introducedBy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Introduced by')),
            ],
            options={
                'verbose_name_plural': 'Satellite data',
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('timeStepUnits', models.CharField(choices=[('m', 'minutes'), ('h', 'hours'), ('d', 'days'), ('w', 'weeks'), ('M', 'months'), ('Y', 'years')], default='d', max_length=2)),
                ('timeStepPeriod', models.IntegerField(default=1)),
                ('quality', models.SmallIntegerField(default=0)),
                ('importCodes', models.CharField(default=None, max_length=512, null=True)),
                ('metaEncrypted', models.BooleanField(default=False)),
                ('metaEncryptionKey', models.CharField(blank=True, default='', max_length=255)),
                ('encryptionKey', models.CharField(blank=True, default=timeSeries.models.get_default_encryptionKey, max_length=255)),
                ('observations', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('introducedBy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='timeSeries.Location')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='timeSeries.DataProvider')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='timeSeries.DataType')),
            ],
            options={
                'verbose_name_plural': 'Series',
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('record', models.BinaryField(null=True)),
                ('recordOpen', models.DecimalField(decimal_places=5, max_digits=9, null=True)),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='timeSeries.Series')),
            ],
        ),
        migrations.AddField(
            model_name='forecast',
            name='extraSeries',
            field=models.ManyToManyField(blank=True, related_name='_forecast_extraSeries_+', to='timeSeries.Series', verbose_name='extra series'),
        ),
        migrations.AddField(
            model_name='forecast',
            name='introducedBy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='forecast',
            name='targetSeries',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forecast_targetSeries', to='timeSeries.Series', verbose_name='target series'),
        ),
    ]
